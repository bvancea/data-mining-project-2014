#!/usr/bin/env python2.7
from numpy.linalg import inv

import numpy as np

ALPHA = 0.15

FEATURES_NR = 6

a_0 = np.identity(FEATURES_NR)
b_0 = np.zeros(FEATURES_NR)

x_a = {}
A = {}
B_a = {}
b_a = {}
a_0_inv = a_0
A_inv = {}
weight = {}
beta = a_0_inv.dot(b_0)

last_aid = 0
last_user = None
gamma = {}
gamma_s = {}


def set_alpha(alpha):
    global ALPHA
    ALPHA = alpha


def compute_gamma(article_id):
    gamma[article_id] = x_a[article_id].transpose().\
            dot(A_inv[article_id]).\
            dot(x_a[article_id]) + \
            x_a[article_id].transpose().\
            dot(A_inv[article_id]).\
            dot(B_a[article_id]).\
            dot(a_0_inv).\
            dot(B_a[article_id].transpose()).\
            dot(A_inv[article_id]).\
            dot(x_a[article_id])


# Evaluator will call this function and pass the article features.
# Check evaluator.py description for details.
def set_articles(art):
    #initialize values
    for article_id in art:
        x_a[article_id] = np.array(art[article_id])
        A[article_id] = np.identity(FEATURES_NR)
        A_inv[article_id] = np.identity(FEATURES_NR)

        B_a[article_id] = np.zeros((FEATURES_NR, FEATURES_NR))
        b_a[article_id] = np.zeros(FEATURES_NR)

        compute_gamma(article_id)

        weight[article_id] = A_inv[article_id].dot((b_a[article_id] - B_a[article_id].dot(beta)))


# This function will be called by the evaluator.
# Check task description for details.
def update(reward):
    global a_0, b_0, A, b_a, B_a, a_0_inv, beta, giant_matrix_1, giant_matrix_2
    if reward < 0:
        return

    precomputed_mult = B_a[last_aid].transpose().dot(A_inv[last_aid])
    a_0 += precomputed_mult.dot(B_a[last_aid])
    b_0 += precomputed_mult.dot(b_a[last_aid])

    A[last_aid] += np.outer(x_a[last_aid], x_a[last_aid])
    A_inv[last_aid] = inv(A[last_aid])

    B_a[last_aid] += np.outer(x_a[last_aid], last_user.transpose())
    b_a[last_aid] += reward * x_a[last_aid]

    precomputed_mult = B_a[last_aid].transpose().dot(A_inv[last_aid])
    a_0 += np.outer(last_user, last_user) - precomputed_mult.dot(B_a[last_aid])
    a_0_inv = inv(a_0)

    b_0 += reward * last_user - precomputed_mult.dot(b_a[last_aid])

    beta = a_0_inv.dot(b_0)
    weight[last_aid] = A_inv[last_aid].dot((b_a[last_aid] - B_a[last_aid].dot(beta)))

    compute_gamma(last_aid)


# This function will be called by the evaluator.
# Check task description for details.
def reccomend(timestamp, user_features, articles):
    global last_user, last_aid
    z_t = np.array(user_features)

    max_ucb = None
    max_ucb_id = None

    z_t_transpose = z_t.transpose()
    #compute UCB score for all articles
    for article_id in articles:
        #compute the UCB score
        s_t_a = z_t_transpose.dot(a_0_inv).dot(z_t) - 2 * z_t_transpose.dot(a_0_inv).\
                        dot(B_a[article_id].transpose()).\
                        dot(A_inv[article_id]).\
                        dot(x_a[article_id]) + \
                        gamma[article_id]
        ucb = z_t_transpose.dot(beta) + x_a[article_id].transpose().dot(weight[article_id]) + ALPHA * np.sqrt(s_t_a)
        #find the max
        if max_ucb is None or max_ucb < ucb:
            max_ucb = ucb
            max_ucb_id = article_id

    last_user = z_t
    last_aid = max_ucb_id
    #pick article with best score
    return max_ucb_id
