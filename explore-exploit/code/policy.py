#!/usr/bin/env python2.7

import numpy as np

ALPHA = 3.0

article_map = {}
weight = {}
user_b = {}
user_m = {}
user_m_inv = {}
last_chosen = 0
last_user = None
USER_FEATURES_NR = 6
ucb = None
w = None
# Evaluator will call this function and pass the article features.
# Check evaluator.py description for details.


def set_articles(art):
    global user_b, user_m, user_m_inv, USER_FEATURES_NR
    #initialize values
    for article_id in art:
        article_map[article_id] = np.array(art[article_id])
        user_b[article_id] = np.zeros(USER_FEATURES_NR)
        user_m[article_id] = np.identity(len(art[article_id]))
        user_m_inv[article_id] = np.linalg.inv(user_m[article_id])


# This function will be called by the evaluator.
# Check task description for details.
def update(reward):
    global user_b, user_m, user_m_inv, last_user, last_chosen
    user_m[last_chosen] += np.inner(last_user, last_user)
    user_m_inv[last_chosen] = np.linalg.inv(user_m[last_chosen])

    if reward > 0:
        user_b[last_chosen] += reward * last_user


# This function will be called by the evaluator.
# Check task description for details.
def reccomend(timestamp, user_features, articles):
    #ToDo the same user could make multiple clicks
    global user_b, user_m, user_m_inv, last_user, last_chosen, ALPHA, ucb, w
    user_features = np.array(user_features)
    last_user = user_features

    max_ucb = None
    max_ucb_id = None

    #compute UCB score for all articles
    for article_id in articles:
        #compute the UCB score
        w = user_m_inv[article_id].dot(user_b[article_id])
        ucb = np.inner(w, user_features) \
                          + ALPHA * np.sqrt(user_features.dot(user_m_inv[article_id]).dot(user_features))

        #find the max
        if max_ucb is None or max_ucb < ucb:
            max_ucb = ucb
            max_ucb_id = article_id

    last_user = user_features
    last_chosen = max_ucb_id
    #pick article with best score
    return max_ucb_id
