#!/usr/bin/env python2.7

import numpy as np
from sklearn import preprocessing

ALPHA = 0.2

A = {}
weight = {}
b = {}
M = {}
M_inv = {}
last_aid = 0
last_user = None
FEATURES_NR = 6
ucb = None
w = None

scaler = preprocessing.StandardScaler()


# Evaluator will call this function and pass the article features.
# Check evaluator.py description for details.
def set_articles(art):
    global b, M, M_inv, FEATURES_NR, scaler
    #initialize values
    for article_id in art:
        A[article_id] = np.array(art[article_id])
        b[article_id] = np.zeros(FEATURES_NR)
        M[article_id] = np.identity(FEATURES_NR)
        M_inv[article_id] = np.linalg.inv(M[article_id])


# This function will be called by the evaluator.
# Check task description for details.
def update(reward):
    global b, M, M_inv, last_user, last_aid
    if reward == -1:
        return

    M[last_aid] += np.outer(last_user, last_user)
    M_inv[last_aid] = np.linalg.inv(M[last_aid])
    b[last_aid] += reward * last_user


# This function will be called by the evaluator.
# Check task description for details.
def reccomend(timestamp, user_features, articles):
    global b, M, M_inv, last_user, last_aid, ALPHA, ucb, w
    user_features = np.array(user_features)
    last_user = user_features

    max_ucb = None
    max_ucb_id = None

    #compute UCB score for all articles
    for article_id in articles:
        #compute the UCB score
        w = M_inv[article_id].dot(b[article_id])
        ucb = np.inner(w, user_features) \
                          + ALPHA * np.sqrt(user_features.dot(M_inv[article_id]).dot(user_features))

        #find the max
        if max_ucb is None or max_ucb < ucb:
            max_ucb = ucb
            max_ucb_id = article_id

    last_user = user_features
    last_aid = max_ucb_id
    #pick article with best score
    return max_ucb_id
